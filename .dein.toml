[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'vim-jp/vimdoc-ja'

[[plugins]] # カラースキーマ
repo = 'nightsense/office'
hook_add = '''
  set termguicolors
  let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
  let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"

  " colorscheme 設定は source 後に行う必要があるので VimEnter で行う。
  " 但し Colorscheme イベントの発生が抑制されないよう nested を付ける。
  autocmd MyAutoCmd VimEnter * nested colorscheme office-dark
  if g:help_translation
    " アクティブウィンドウのステータスラインの色を目立たせる
    autocmd MyAutoCmd ColorScheme * highlight StatusLine ctermfg=100 guifg=SeaGreen
    " Boldをつける
    autocmd MyAutoCmd ColorScheme * highlight Error gui=Bold guifg=Red
  endif
  " 日本語表示でカーソルを赤くする
  autocmd MyAutoCmd ColorScheme * highlight CursorIM guibg=Red
  " 微調整
  autocmd MyAutoCmd ColorScheme * highlight Comment guifg=#676760
  autocmd MyAutoCmd ColorScheme * highlight SpecialKey guifg=#684f76
'''

[[plugins]]
repo = 'Yggdroot/indentLine'
hook_add = '''
  let g:indentLine_char = '┊'
  let g:indentLine_fileType = ['c', 'cpp', 'ipp', 'hpp', 'hh']
'''

[[plugins]] # deniteはpythonが必要なので会社のPCに入れるのが面倒、という後ろ向きな理由でctrlpを入れる。
repo = 'ctrlpvim/ctrlp.vim'
hook_add = '''
  let g:ctrlp_clear_cache_on_exit = 0
  let g:ctrlp_lazy_update = 1
  " gtagsがある場所をrootとみなす。確か".git"は自動的にrootとみなす仕様だった気がする。
  let g:ctrlp_root_markers = ['gtags']
  " 表示windowの行数
  let g:ctrlp_match_window = 'max:30'

  " ファイル履歴を開く
  " <c-m>は使えません！！！enterの挙動も変わってしまう
  " nnoremap <c-m> :CtrlPMRUFiles<cr>
  nnoremap mru :CtrlPMRUFiles<cr>
'''

[[plugins]]
repo = 'vim-airline/vim-airline'
[[plugins]]
repo = 'mnishz/current-func-info.vim'
hook_add = '''
  let g:airline_section_c = airline#section#create(['[%n] %<', 'file', " / %{cfi#format('%s','')} ", 'readonly'])
'''

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
  nnoremap <c-e> :NERDTreeToggle<cr>
  let g:NERDTreeHijackNetrw = 0
'''

[[plugins]]
repo = 'mnishz/notes.vim'

[[plugins]]
repo = 'mnishz/devotion.vim'

[[plugins]]
repo = 'mnishz/colorscheme-preview.vim'

[[plugins]]
repo = 'mnishz/rainfall.vim'
rev = 'tenki_jp'

[[plugins]]
repo = 't9md/vim-quickhl'
hook_add = '''
  nmap <Space>m <Plug>(quickhl-manual-this)
  xmap <Space>m <Plug>(quickhl-manual-this)
  nmap <Space>w <Plug>(quickhl-manual-this-whole-word)
  nmap <Space>M <Plug>(quickhl-manual-reset)
  xmap <Space>M <Plug>(quickhl-manual-reset)
  nmap <Space>L :QuickhlManualList<cr>
'''

[[plugins]]
repo = 'rhysd/clever-f.vim'
hook_add = '''
  let g:clever_f_mark_cursor = 0
'''

[[plugins]]
repo = 'prabirshrestha/asyncomplete.vim'
[[plugins]]
repo = 'prabirshrestha/async.vim'
[[plugins]]
repo = 'prabirshrestha/vim-lsp'
hook_add = '''
  if executable('clangd')
    au User lsp_setup call lsp#register_server({
      \ 'name': 'clangd',
      \ 'cmd': {server_info->['clangd']},
      \ 'whitelist': ['c', 'cpp', 'cc'],
      \ })
  endif
  " if executable('cquery')
  "   au User lsp_setup call lsp#register_server({
  "     \ 'name': 'cquery',
  "     \ 'cmd': {server_info->['cquery']},
  "     \ 'root_uri': {server_info->lsp#utils#path_to_uri(lsp#utils#find_nearest_parent_file_directory(lsp#utils#get_buffer_path(), 'compile_commands.json'))},
  "     \ 'initialization_options': { 'cacheDirectory': '/tmp/cquery/cache' },
  "     \ 'whitelist': ['c', 'cpp', 'cc'],
  "     \ })
  " endif
  let g:lsp_diagnostics_echo_cursor = 1
  let g:lsp_text_edit_enabled = 0
'''
[[plugins]]
repo = 'prabirshrestha/asyncomplete-lsp.vim'

[[plugins]]
repo = 'lyuts/vim-rtags'

[[plugins]]
repo = 'previm/previm'
hook_add = '''
  if has('win32')
    let g:previm_open_cmd = 'C:\\Program\ Files\\Mozilla\ Firefox\\firefox.exe'
  endif
  let g:previm_enable_realtime = 1
  let g:previm_custom_css_path = '~/dotfiles/previm_my.css'
'''

# [[plugins]]
# repo = 'jiangmiao/auto-pairs'
#
# [[plugins]]
# repo = 'airblade/vim-gitgutter'
